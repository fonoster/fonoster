name: release

on:
  push:
    branches:
      - main
    paths:
      - mods/**
      - package.json
      - package-lock.json
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      RELEASE: ${{ env.RELEASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies and build
        run: |
          npm install
          npm run build

      # We will do this manually for now
      - name: Check for next release
        run: |
          release=$(.scripts/next-release.sh)
          echo "Next release: $release"
          echo "RELEASE=$release" >> $GITHUB_ENV

      - name: Publish packages to NPM
        if: env.RELEASE != 'none'
        run: |
          echo "NPM_TOKEN=${{ secrets.NPM_TOKEN }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GH_PAT }}" >> $GITHUB_ENV
          echo "@routr:registry=https://registry.npmjs.org/" > .npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc

          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout .

          # FIXME: This is a workaround to prevent the unit tests from failing
          cp .env.example.dev .env
          sed -i "s|AUTOPILOT_INTEGRATIONS_FILE=.*|AUTOPILOT_INTEGRATIONS_FILE=./config/integrations.example.json|g" .env          

          npm run release

      - name: Get version from Lerna
        run: |
          lerna_version=$(node -p "require('./lerna.json').version")
          echo "LERNA_VERSION=$lerna_version" >> $GITHUB_ENV

      - name: Create release note
        if: env.RELEASE != 'none'
        id: changelog
        uses: loopwerk/tag-changelog@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          exclude_types: other,doc,chore
          config_file: ./.scripts/tag-changelog-config.cjs

      - name: Create draft release
        if: env.RELEASE != 'none'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.LERNA_VERSION }}
          release_name: Release v${{ env.LERNA_VERSION }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true

  publish-apiserver:
    name: Publish APIServer to Docker Hub
    needs: [build]
    if: needs.build.outputs.RELEASE != 'none'
    uses: ./.github/workflows/publish-apiserver.yaml
    secrets: inherit

  publish-autopilot:
    name: Publish Autopilot to Docker Hub
    needs: [build]
    if: needs.build.outputs.RELEASE != 'none'
    uses: ./.github/workflows/publish-autopilot.yaml
    secrets: inherit

